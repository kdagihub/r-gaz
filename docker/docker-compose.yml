version: '3.8'

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ../.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rgaz@25}
      - POSTGRES_USER=${POSTGRES_USER:-kda}
      - POSTGRES_DB=${POSTGRES_DB:-rgaz}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-rgaz}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build:
      context: ..
      dockerfile: docker/backend.dockerfile
    volumes:
      - ../backend:/app
      - ../backend/staticfiles:/app/staticfiles
      - ../backend/mediafiles:/app/mediafiles
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "python manage.py collectstatic --noinput &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped

  nginx:
    image: nginx:1.21
    ports:
      - "80:80"
    volumes:
      - ../frontend:/usr/share/nginx/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ../backend/staticfiles:/usr/share/nginx/html/static
      - ../backend/mediafiles:/usr/share/nginx/html/media
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data: